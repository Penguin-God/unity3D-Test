1강 - 퀴터뷰 플레이어 이동
I. 플레이어 이동 및 transform.LookAt을 이용한 이동 방향에 따른 오브젝트 방향 전환(Player Script)
II. 카메라 이동(FollowCamera Script) - Update() { transform.position = player.transform.position + Vector3 변수 } 코드를 작성하여 플레이어를 따라다님

2강 - 점프와 회피
1. 점프(Player Script -> Jump()) - 가만히 있을 때 space 입력 시 RigidBody.AddForce(Vector3 * float형 변수)를 이용하여 위로 올리면서 점프 애니메이션 실행 그 후 RigidBody compenent 
중력에 의해 떨어지다가  바닥에 닿을 시 OnCollsionEnter() { code } 를 이용하여 착지 애니메이션 실행
2. 구르기(Player Script -> Dodge) - 움직이고 있을 때 space 입력 시 움직이던 방향으로 이동(이때 속도 증가)하면서 애니메이션 작동 

3강 - 아이템 만들기
1. 파티클을 이용한 아이템 이펙트 제작(Particle System component)
2. enum을 이용해 아이템에 Type 부여(Item Script)
3. 만든 아이템 프리펩 저장(PreFabs -> Forder)

4강 - 드랍 무기 입수와 교체
1. 무기 드랍(Player Script) - OnTriggerStay() 를 이용하여 콜라이더에 닿아있는 동안 e키를 누르면 드랍
2. 무기 착용 및 교체(Player Script -> WeaponSwap()) - 플레이어에게 미리 무기를 세팅하고 SetActive를 꺼놓고 플레이어가 무기를 드랍 후 무기에 맞는 키보드 숫자를 입력 시 SetActive를 킴
교체 후 Weapon변수에 GetComponent<Weapons>를 이용해 현재 들고있는 무기의 스크립트로 채움

5강 - 아이템 먹기 & 공전 물체 만들기
1. 아이템 드랍(Player Script) - OnTriggerEnter()을 이용하여 플레이어가 콜라이더에 닿을 때 case문을 이용하여 Type에 따라 먹을 아이템 구분
2. 물체 공전(Orbit Script)- 플레이어 주변에 파티클 이동에 따른 이펙트를 적용한 수류탄을 4개 세팅시키고 SetActive를 꺼둔 후 드랍 시 수류탄이 켜지고 transform.RatateAround()를 사용하여 수류탄 개수에 따라 플레이어 주의를 공전시킴

6강 - 코루틴으로 근접공격 구현하기
1. 근접 공격 이펙트(Trail Renderer Component) - TrailRenderer 컴포넌트를 사용하여 망치 휘드를 시 이펙트 생성
2. enum 열거형으로 무기 구분(Weapons Script) - enum 열거형을 사용하여 근접과 원거리 무기를 나눔
3. 코루틴을 이용한 공격 구현(Weapons Script -> Melee) - Coroutine의 시간 대기를 사용하여 시간에 따라 피격 콜라이더와 이펙트를 껏다 키면서 공격
4. 공격 실행(Player Script -> Attack()) - deltaTime을 이용해 쿨타임 구현, 공격 시 들고있는 무기의 타입에 따라 다른 애니메이션 실행

7강 - 원거리공격 구현
1. 총알 이펙트 제작(PreFabs -> Weapon Forder) - TrailRenderer 컴포넌트를 사용하여 총알 이펙트와 피격 판정을 담당할 콜라이더 부여
2. 탄피 생성(Bullet Script) - 탄피 생성 후 총알과 탄피가 벽이나 바닥에 닿으면 사라지는 Bullet Script 작성
3. 발사 구현(Weapon Script -> Shot()) - 생성시킬 게임 오브젝트 변수와 오브젝트가 생성될 트랜스폼 변수 선언 후 총알과 탄피가 생성된 후 총알은 쭉 앞으로 나아가기 위해 속도를 부여하고 
탄피는 총에서 튀어 나가게 하기 위해 AddForce()를 사용하여 액션을 줌
4. 재장전 구현(Player Script -> Reload()) - 총알이 맥스가 아닌 상태로 R키 입력 시 애니메이션 실행 후 부족한 총알의 개수만큼 장전함, Invoke()를 활용하여 애니메이션 실행동안 
isReload 변수를 true로 만들어 공격 등 다른 활동에 제한을 둠
5. 마우스 회전(Player Script -> PlayerTurn()) - 마우스 클릭 시 ScreenPointToRay(Input.MousePosition); 을 활용하여 클릭한 위치에 Ray를 쏜 후 if(Physics.Raycast(Ray, out RayHit, 100))을
활용하여 Ray가 오브젝트에 닿을 시 RayHit.point로 클릭한 곳의 Vector3값을 가져온 후 transform.LookAt(Vector3)함수에 인수로 넣어 마우스를 클릭한 곳을 바라보게 함

8강 - 플레이어 물리 문제 고치기
1. 자동회전 방지(Player Script -> FixedUpdate()) - 플레이어가 외부 충돌로 인해 자동으로 회전하므로 rigidbody.angularVelocity = Vector3.zero; 로 만듬
2. 충돌 레이어 설정(UnityEngine -> 편집 -> 프로젝트 설정 -> 물리) - 충돌하지 말아야 하는 레이어들은 서로의 체크박스를 해제하면 서로 충돌하지 않음
3. 벽 관통 방지(PlayerScirpt -> StopWell(), PlayerMove()) - bool isBorder = Physics.Raycast(transform.position, transform.forward, 3, LayerMask.GetMask("벽")); 로 벽에 닿으면 true를 반환하고
true일시 player의 transform이동만 제한함(애니메이션, 회전은 작동)
4. 아이템 물리 충돌 제거(Item Script) - OnCollisionEnter()를 사용해 아이템이 바닥에 닿을시 콜라이더를 비활성화 rigidbody.isKinematic을 true로 만듬 이때 아이템의 콜라이더는 드랍 범위 트리거
콜라이더와 충돌 콜라이더가 있는데 Script에서 충돌 콜라이더를 비활성화 시키기 위해서 충돌 담당 콜라이더를 트리거 콜라이더보다 위에 올림

9강 - 피격테스터 만들기 
1. 충돌 이벤트(EnemyScript -> OnTriggerEnter()) - OnTriggerEnter에서 조건문으로 other.tag로 접촉한 물체가 근거리 공격인지 원거리 공격인지 구분 그 후
other.GetComeponent<>를 사용해 무기 Script의 데미지 변수를 hp에서 뺌
2. 충돌 효과(EnemyScript -> DamageEffect()) -> 피격당한 몬스터의 색깔을 바꿨다가 if문을 써서 살아있으면 색깔을 원래대로 돌리고 죽었으면 어둡게 바꾼 후 layer를 바꿔 죽고 난 후에는 다른
오브젝트와의 물리 충돌을 하지 않도록 설정에서 물리 충돌을 체크 해제함
3. 넉백 추가(EnemyScript -> OnTriggerEnter()) - 현재 몬스터 위치에서 피격당한 위치를 빼서 반작용 방향역할을 하는 백터값을 구하고 구한 백터값에 값을 곱하거나 더한 후 AddForce()에 
백터값을 넘겨서 사용

10강 - 수류탄 구현하기
1. 

주의사항
프리펩 public object변수는 object가 프리펩화 되어 있어야 사용이 가능함 프리펩화 되어있지 않다면 script에서 Find를 이용하는 등의 방법으로 변수를 인스턴스화 시켜야함
Button의 내비게이션이 켜져있으면 키보드 입력 시에도 버튼이 동작하는 경우가 있어 마우스 입력만 받고 싶다면 None으로 설정해야함
